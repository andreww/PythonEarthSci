Exercise 2: Scripts and modules
===============================
:Author: Andrew Walker
:Email: andrew.walker@bristol.ac.uk
:Revision: 0.1

You have now seen a large portion of the Python 
language; enough to be able to write useful programs 
for data analysis. Some of the features we have not 
looked at are just syntactic sugar, they allow you to 
express concepts we have already considered more 
elegantly using less characters. I'll leave you to 
discover these features yourselves. Some of the 
missing features become important when you start to 
think of Python as an object oriented language and we 
will consider these on Thursday. In this session we 
will look at how to write a relatively simple but useful 
program. The program will follow many of the patterns 
you will find if you write real data analysis code: you 
will learn how to read data from a collection of data 
files, perform some simple analysis of the data, and 
then produce a report of the analysis. Along the way 
you will learn how to write code in small pieces such 
that are easily reusable. You will learn to design a 
script that can act as a module (and a module that can 
act as a script). 


The task you will focus on is the analysis of historical 
monthly rainfall data for the south of England and Wales. 
This data is made available by the Met Office and is stored 
in fairly simple text files. These files do have some 
quirks and you will need to work out how to deal with 
these. You will use the same dataset on Thursday when you 
learn how to use Python to plot time-series and geographical 
data, and perform more advanced analysis. 

Task 1: Graphing rainfall
-------------------------

The file `XXX` (reproduced below) contains a snippet of 
rainfall data covering the last twenty years for one weather 
station. As you can see, the data is stored within the 
Python source file in a data structure that consists of
XXX.  There is a subroutine that graphs the data and this 
is used if you run the program. As well as an argument for 
the data, the subroutine also accepts an optional second 
argument for the annual rainfall. This should be expressed 
as a XXX (there is an outline of this data structure in 
the file. Write the Python code needed to calculate the 
annual rainfall and fill out this data structure. Do the 
wettest years contain the wettest months?

Task 2: Reading a simplified data file
--------------------------------------

The file NNN is a simplified version of the data file distributed 
by the Met Office. It consists of N columns of data with one row 
per month that the XXX weather station has been operating. The 
columns are X Y Z. Modify the graphing program to read data from 
this file and build the XXX data structure. Can you graph the 
monthly and annual rainfall without further modifications to the 
code? I hope you put the file reading machinery in a function. What 
is the function's argument?

TIP: Remember that you can read lines from a file by opening it 
and using the resulting file type in a `for line in file:` block
ETC ETC ETC. Don't forget to close the file when you have finished 
with it. Remember that you'll need to change the string extracted 
from the file into data of the float type.


Task 3: Parsing the full file format
------------------------------------

The file format provided by the Met Office is a little more complex 
than the file provided in task 2. Some of the data is estimated, 
this is noted with an asterisk next to the measured rainfall in 
the file (there is no space between the numbers and the asterisk). 
What happens if you try to convert `12.4*` into a float (e.g. 
`float("12.4*")`)? A second complication is that the data files 
contain a large block of header text. Some of this is useful 
(the station name on the first line, the location data on the 
second) but some only helps people reading the file and mainly 
gets in the way of your attempt to read the file. Modify your 
data file reading function to handle these two cases and put 
the weather station name in a field called "name" in the 
returned dictionary.  Read data from the file 
called FULLDATAFILE.

TIP: Your `for line in file:` iteration will visit each line in 
the file in turn. The Met Office header is always the same number 
of lines, so you can simply keep track of how many lines you have 
seen so far and only start reading monthly data after you have 
seen N lines. Think back to how do you run a piece of code within 
the iteration conditionally?

The location data in the data file is in an extremely unhelpful 
format and, as far as I can see, isn't documented anywhere. It 
turns out that the numbers before the N and E line are the 
number of hundreds of meters east and north of a point south west 
of the Schilly(sp.?) Islands. The numbers are a six figure 
Ordinance Survey grid reference in disguise. I've provided a 
module (in the file XXX) with functions to convert the location 
to an (approximate) latitude and longitude. You have two options: 
(1) Extract the numbers from the second line of the data file and 
use my XXX function. If you do this you may want to explore Python's
regular expression library. (2) Skip the data extraction part and 
pass the whole second line (as a string) into my XXX function which 
extracts the numbers for you. In either case, put the returned 
location data in the data structure so we can plot the weather 
stations on a map on Thursday.

TIP: Remember that you will need to `import XXX` to 
access my functions.



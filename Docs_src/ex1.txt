Exercise 1: First steps
=======================
:Author: Andrew Walker
:Email: andrew.walker@bristol.ac.uk
:Revision: 0.1

In exercise you will learn how to use a
Python interpreter interactively and to run simple pieces 
of code. Using this knowledge you will investigate the 
basic syntax of a Python program, learn what many of the 
operators and keywords do, and explore the Python type system 
and its semantics.  The tasks were written to target 
the CPython interpreter and, in particular, the Enthought 
Python Distribution (EPD) installed on a Mac, but everything 
here should be portable between different operating systems, 
interpreters and Python distributions. 

Work through the following tasks in order, they should be 
self-explanatory but do ask if you have a problem. It doesn't 
matter too much if you don't manage to finish this afternoon, 
getting to the end of task XXX is all that's needed to allow 
you to do the second exercise. However, you should try and 
find time to look at everything before Thursday afternoon.  
Python code and output is typeset in `monotype` font, and 
this can be typed directly into the interpreter. 

Task 1: Assignment, equality and logic
--------------------------------------

Start up as terminal and then the python interpreter by typing `./python`. You
should see the version information and a command prompt:

[code,python]
----
Enthought Python Distribution -- www.enthought.com
Version: 7.1-2 (32-bit)

Python 2.7.2 |EPD 7.1-2 (32-bit)| (default, Jul 27 2011, 13:29:32) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "packages", "demo" or "enthought" for more information.
>>>
----

You can run simple python code from the "`>>>`" command prompt.

* Let `a = 1` (type "a=1" at the command prompt). What is `a` (type "a")?
* Let `b = 2`. What is `b`?
* Let `c = 2.75`. What is `c`?
* What is `b` after you type `b=a`?
* What is `a`?

`a`, `b`, and `c` are variables, `1`, `2` and `2.75` are values, `=` is 
the assignment operator.

* What is `f`?

NOTE: You should see an error as `f` has not been defined. This is useful as it
    helps avoid turning simple typo's into hard to fix bugs. 

* Let `e = 2` and `f = 3`.
* Is `e == b`?
* Is `f > e`?
* Is `c < f`?
* Is `c < a`?
* Is `a <= e`?
* Is `e >= a`?
* Let `t = True`. What is `t`?

`==`, `>`, `<`, `<=` and `>=` are the basic logical operators used to test for equality,
greater than, less than, less than or equals and greater than or equals. `True`
and `False` are logical values representing truth and falsehood.

WARNING: `==` and `=` do different things; `True` and `False` must be capitalised. 

* What is `not True`
* What is `not False`
* What is `(e == b) and (c < f)`?
* What is `(e < 3) and t`?
* What is `True and False`?
* What is `False and False`?
* What is `True and True`?
* What is `True or False`?
* What is `not (True or False)`?

The Boolean operators `and`, `or`, and `not`, can be used to 
combine logical tests. Brackets (parentheses) can be used to group and 
order them.

Quit the interpretor (type `quit()` or Ctrl-D).


Task 2: Block statments
-----------------------

The python interpreter can also be used to execute a 
series of statements in a file. These statements are 
executed in sequence from the first line to the last. 
Use your favorite text editor to create a file called 
`count.py` containing the following python code:

[code,python]
----
i = 1
while (i < 10):
    print i
    i = i + 1
print "The end"
----

Run this code by typing `python ./count.py` at the shell 
command prompt. What is printed to the screen?  Is 
this what you expect?

You should see the numbers 1 to 9 and the string "The end"
printed before the interpreter exits and you are returned 
to the command prompt. The while statement begins a block 
of code that is executed in a loop until some logical 
condition is false. What is the logical test in your count 
program? Is this tested before or after the block of code 
guarded by the while statement is run? 

Modify the logic in your program to make it count to 10. 
Is there another way to change the logic to achieve the 
same thing? Now change the program to count backwards 
from 10 to 1. Change it again to only print the even numbers. 

Often, one of the most disconcerting features of Python is that 
blocks of code are delimited by indentation. Most programmers 
will indent loops and other blocks of code they write but 
Python is unusual in demanding indentation and using it as 
part of the semantics of the language. If you've not already 
inadvertently found out, see what happens if you change your 
counting program so that the indentation is not consistent. 
For example, indent the `print` more than the `i = i + 1` line.  

NOTE: Although Python allows flexibility when indenting blocks 
of code, the use of four space characters is strongly 
recommended by the semi-official style guide 
(link:http://www.python.org/dev/peps/pep-0008/[PEP 8]). 
Most code you read will have blocks indented with four spaces. 
Most code you write should also use four spaces for indentation.

What does the following code snippet do? 

[code,python]
----
def count():
    i = 1
    while (i < 10):
        print i
        i = i + 1
print "The end"
----

Are you sure? It's in the file `count_func.py`, run it to find out.

Although Python programs are executed sequentially, from the start 
to the end of the file, like many languages, you can specify a 
piece of code should form a subroutine or function that can be 
run later. When the interpreter reaches a block of code guarded 
by the `def` statement a function is defined. The function is not 
run until it is called by name. Modify `count_func.py` to call 
the count function:

[code,python]
----
def count():
    i = 1
    while (i < 10):
        print i
        i = i + 1
count()
print "The end"
----

What does this code do?

What happens if you try and call the function before 
the function has been defined? Does this work:

[code,python]
----
count()
def count():
    i = 1
    while (i < 10):
        print i
        i = i + 1
count()
print "The end"
----

Functions can (optionally) have one or more arguments 
(in the parentheses). These allow the function to be 
more general. Modify your code to accept an argument, 
`n`, the upper limit of the printed numbers, and `m` 
the lower limit.  Print three lists of numbers, 
1 – 10, 14 – 27,  and 88 – 96.

NOTE: Argument lists to Python functions allow 
considerable flexibility. It's easy to give 
functions optional arguments, arguments with default 
values, and even accept lists of arguments without 
knowing what they will be when you write the function. 
Functions don't need to be given names. Functions can 
take functions as arguments, can call them (and can call 
themselves recursively) and functions can return 
other functions. For example, you can write a general 
integration routine without knowing the function you 
will be integrating. We will look at some of these 
features later in the course. A good introduction 
can also be found in Chapter 
link:http://docs.python.org/tutorial/controlflow.html#defining-functions[4.6] 
and link:http://docs.python.org/tutorial/controlflow.html#more-on-defining-functions[4.7] 
of the Python tutorial.

The third block statement allows pieces of code to be 
executed conditionally. What does the following code print?

XXX XXX

Are you sure? It's in the file `count_if.py`, run 
it to find out.

The block of indented code guarded by an if 
statement is only executed when the condition is 
true. Note that we can embed

XXX XXX

Task 3: Basic mathematical operators and scalar types
-----------------------------------------------------

Now look at how python handles mathematics. Beware, there may by one or two surprises.
Use the interpreter interactively to decide:

* What is `2+3`?
* What is `2*6`?
* What is `2-5`?
* What is `6/3`?

The arithmetic operators work as you may expect. 

* What is `7/3`?
* What is `-7/3`?

Is this what you expected? 

NOTE: Remember that numbers in python can be
    integers or floats and that integer division rounds down. 

* What is `type(3)`? 
* What about `type(7)`?
* So what is `type(7/3)`?
* Does `7.0/3` give you the right answer?
* Why?
* What is `type(7.0)`
* So what is `type(7.0/3)`?
* What about `type(7/3.0)`?


* What is `1.2 - 1.0`?
* Is that correct? what's going on?

XXX 

http://docs.python.org/tutorial/floatingpoint.html

XXX - complex numbers...

Task 4: Strings 
---------------

Another data type in Python is the string. Literal 
strings are embedded in single or double quotes 
and strings can be assigned to variables just 
like the other types:

* If `a = "Some text"`, what is `type(a)`?
* What is  `a[0]`?
* And `a[0:4]`?
* What is `a[8]`?
* What is `a[5:9]`?
* What about `a[5:]`?
* What is `a[:]`? Is this any different from `a`?
* What is `a[:4]?

In Python strings are a sequence of characters 
numbered from 0.  Sub-strings can be accessed 
using an index notation using brackets (not 
parentheses) containing integers separated by 
colons. When only one index is provided a single 
character is returned. When two indices are provided 
a series of characters are returned from the first, 
to one less than the second index. If left out (but 
with the colon in place) the indices default to 
the start and end of the string. 

* What is `a + " some more text"`?
* What about `a * 3`?
* Do the `-` or `/` operators work on strings?

When placed between strings, `+` acts as a 
concatenation operator and `*` works as a 
repetition operator.

* What is ` a[0:9:2]`?
* What about `a[-4:]`?
* What is `a[-2:-1]`?
* What is `a[::-1]`?
* What happens if you try and change the "S" 
into an "s" in `a`? Does `a[0] = "s"` work?

The third list index specifies how the sub-string is 
constructed by stepping through the string. Negative 
indices count backwards from the end, or reverse 
along the string. Note that strings are immutable. 
You cannot use the index notation to change bits of 
a string. We’ll cover this concept in more detail later.  

* If `b = "1.0"` what is `type(b)`?
* What is `float(b)`? What is its type?
* If `c = "1"` what is its type?
* What is `int(c)` and what is its type?
* Can you turn `b` into an integer? What about `c` into a float?




